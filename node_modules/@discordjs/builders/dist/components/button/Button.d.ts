import { ButtonStyle, type APIMessageComponentEmoji, type APIButtonComponent } from 'discord-api-types/v10';
import { ComponentBuilder } from '../Component';
/**
 * Represents a button component
 */
export declare class ButtonBuilder extends ComponentBuilder<APIButtonComponent> {
    /**
     * Creates a new button from API data
     * @param data - The API data to create this button with
     *
     * @example
     * Creating a button from an API data object
     * ```ts
     * const button = new ButtonBuilder({
     * 	style: 'primary',
     * 	label: 'Click Me',
     * 	emoji: {
     * 		name: ':smile:',
     * 		id: '12345678901234567890123456789012',
     * 	},
     *  custom_id: '12345678901234567890123456789012',
     * });
     * ```
     *
     * @example
     * Creating a button using setters and API data
     * ```ts
     * const button = new ButtonBuilder({
     * 	style: 'primary',
     * 	label: 'Click Me',
     * })
     * .setEmoji({ name: ':smile:', id: '12345678901234567890123456789012' })
     * .setCustomId('12345678901234567890123456789012');
     * ```
     */
    constructor(data?: Partial<APIButtonComponent>);
    /**
     * Sets the style of this button
     *
     * @param style - The style of the button
     */
    setStyle(style: ButtonStyle): this;
    /**
     * Sets the URL for this button
     *
     * @remarks
     * This method is only available to buttons using the `Link` button style.
     * Only three types of URL schemes are currently supported: `https://`, `http://` and `discord://`
     *
     * @param url - The URL to open when this button is clicked
     */
    setURL(url: string): this;
    /**
     * Sets the custom id for this button
     *
     * @remarks
     * This method is only applicable to buttons that are not using the `Link` button style.
     *
     * @param customId - The custom id to use for this button
     */
    setCustomId(customId: string): this;
    /**
     * Sets the emoji to display on this button
     *
     * @param emoji - The emoji to display on this button
     */
    setEmoji(emoji: APIMessageComponentEmoji): this;
    /**
     * Sets whether this button is disabled
     *
     * @param disabled - Whether to disable this button
     */
    setDisabled(disabled?: boolean): this;
    /**
     * Sets the label for this button
     *
     * @param label - The label to display on this button
     */
    setLabel(label: string): this;
    /**
     * {@inheritDoc ComponentBuilder.toJSON}
     */
    toJSON(): APIButtonComponent;
}
//# sourceMappingURL=Button.d.ts.map